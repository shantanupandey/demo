<<<<<<< .mine
package com.assentisk.util;


import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;


import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.support.JdbcDaoSupport;

import com.assentisk.dao.RegulationDao;
import com.assentisk.dao.RegulationDaoImpl;


public class FilesService extends JdbcDaoSupport {
	
	protected RegulationDao regulationDao;

	public RegulationDao getRegulationDao() {
		return regulationDao;
	}

	public void setRegulationDao(RegulationDao regulationDao) {
		this.regulationDao = regulationDao;
	}

	String query = null;

	public InputStream getImage(){  
		 return (InputStream) getJdbcTemplate().query("select CompanyLogo from assentisk_company where CompanyID=11",new ResultSetExtractor(){  
		     public InputStream extractData(ResultSet rs) throws SQLException,  
		            DataAccessException {  
		      
		    	InputStream input = rs.getBinaryStream("CompanyLogo");
		        return input;
		        }  
		    });  
		  }  
	
	public void save(final Files file,String sql) {
		
		query = sql;
		try {
			synchronized (this) {
				getJdbcTemplate().update(new PreparedStatementCreator() {
					public java.sql.PreparedStatement createPreparedStatement(
							java.sql.Connection con) throws SQLException {
						java.sql.PreparedStatement statement = con
								.prepareStatement(query);
						
						statement.setBytes(1, file.getFile());
						
						return statement;
					}
				});
			}

		} catch (NullPointerException ex) {
			ex.printStackTrace();
		}

	}

	public void generatePositionProfileXls(HttpServletRequest req,String Doc_name,List catList)
	throws SQLException, IOException {
	Integer key = 1;
	
	try {
	HSSFWorkbook workbook = new HSSFWorkbook();
	HSSFSheet sheet = workbook.createSheet(Doc_name);
	Map<String, Object[]> data = new LinkedHashMap<String, Object[]>();
	data.put(key.toString(), new Object[] { "Control ID","Risk","Control Objective","Control Description", "Test Steps",
			});

	
	System.out.println("check catList..list....>>>>"+catList);
	
	

	for (int i = 0; i < catList.size(); i++) {
		Map map = (Map) catList.get(i);
		

		short colIndex = 0;
		data.put((++key).toString(), new Object[] { map.get("Control_ID"),map.get("Risk"),map.get("Control_Objective"),map.get("Control_Description"),map.get("Test_Steps")});
		Set<String> keyset = data.keySet();
		int rownum = 0;

		sheet.setColumnHidden((short) 14, true);

		for (String key2 : keyset) {
			HSSFRow row = sheet.createRow(rownum++);
			Object[] objArr = data.get(key2);
			short cellnum = 0;
			for (Object obj : objArr) {

				if (obj instanceof String) {
					row.createCell(cellnum++)
							.setCellValue((String) obj);

				} else if (obj instanceof Integer)
					row.createCell(cellnum++).setCellValue(
							(Integer) obj);
				else if (obj instanceof String) {
					row.createCell(cellnum++)
							.setCellValue((String) obj);

				} else if (obj instanceof String)
					row.createCell(cellnum++)
							.setCellValue((String) obj);
				else if (obj instanceof String)
					row.createCell(cellnum++)
							.setCellValue((String) obj);
				else if (obj instanceof String)
					row.createCell(cellnum++).setCellValue(
							(Integer) obj);
				else if (obj instanceof Integer)
					row.createCell(cellnum++).setCellValue(
							(String) obj);
				else if (obj instanceof String)
					row.createCell(cellnum++)
							.setCellValue((String) obj);
				else if (obj instanceof String)
					row.createCell(cellnum++).setCellValue(
							(String) obj);
				else if (obj instanceof String)
					row.createCell(cellnum++).setCellValue(
							(String) obj);
				else if (obj instanceof String)
					row.createCell(cellnum++).setCellValue(
							(String) obj);
				else if (obj instanceof String)
					row.createCell(cellnum++).setCellValue(
							(String) obj);
				else if (obj instanceof String)
					row.createCell(cellnum++).setCellValue(
							(String) obj);
				else if (obj instanceof String)
					row.createCell(cellnum++).setCellValue(
							(String) obj);
				else if (obj instanceof String)
					row.createCell(cellnum++).setCellValue(
							(String) obj);
			}
			
		}

	}
	FileOutputStream out = new FileOutputStream(new File(
			""+Doc_name+".xls"));
	workbook.write(out);
	out.close();
	System.out.println("Excel written successfully..");
} catch (FileNotFoundException e) {
	e.printStackTrace();
} catch (IOException e) {
	e.printStackTrace();
} catch (Exception ex) {
	ex.printStackTrace();
}
}

	public void generateEmployeDemoXls(HttpServletRequest req, String docName) 
	throws SQLException, IOException {
		Integer key = 1;
		
		try {
		HSSFWorkbook workbook = new HSSFWorkbook();
		HSSFSheet sheet = workbook.createSheet(docName);
		Map<String, Object[]> data = new LinkedHashMap<String, Object[]>();
		data.put(key.toString(), new Object[] { "DepartmentID","LocationID","EmpName","Email", "address","city","state","country","zip","phone1","phone2","divisions","email2","isLicense","isActive","abc"});
		Set<String> keyset = data.keySet();
		int rownum = 0;
		
		sheet.setColumnHidden((short) 15, true);

		for (String key2 : keyset) {
			HSSFRow row = sheet.createRow(rownum++);
			Object[] objArr = data.get(key2);
			short cellnum = 0;
			for (Object obj : objArr) {

				if (obj instanceof String) {
					row.createCell(cellnum++)
							.setCellValue((String) obj);

				} else if (obj instanceof Integer)
					row.createCell(cellnum++).setCellValue(
							(Integer) obj);
				else if (obj instanceof String) {
					row.createCell(cellnum++)
							.setCellValue((String) obj);

				} else if (obj instanceof String)
					row.createCell(cellnum++)
							.setCellValue((String) obj);
				else if (obj instanceof String)
					row.createCell(cellnum++)
							.setCellValue((String) obj);
				else if (obj instanceof String)
					row.createCell(cellnum++).setCellValue(
							(Integer) obj);
				else if (obj instanceof Integer)
					row.createCell(cellnum++).setCellValue(
							(String) obj);
				else if (obj instanceof String)
					row.createCell(cellnum++)
							.setCellValue((String) obj);
				else if (obj instanceof String)
					row.createCell(cellnum++).setCellValue(
							(String) obj);
				else if (obj instanceof String)
					row.createCell(cellnum++).setCellValue(
							(String) obj);
				else if (obj instanceof String)
					row.createCell(cellnum++).setCellValue(
							(String) obj);
				else if (obj instanceof String)
					row.createCell(cellnum++).setCellValue(
							(String) obj);
				else if (obj instanceof String)
					row.createCell(cellnum++).setCellValue(
							(String) obj);
				else if (obj instanceof String)
					row.createCell(cellnum++).setCellValue(
							(String) obj);
				else if (obj instanceof String)
					row.createCell(cellnum++).setCellValue(
							(String) obj);
			}
			
		}
		

		FileOutputStream out = new FileOutputStream(new File(
				""+docName+".xls"));
		workbook.write(out);
		out.close();
	} catch (FileNotFoundException e) {
		e.printStackTrace();
	} catch (IOException e) {
		e.printStackTrace();
	} catch (Exception ex) {
		ex.printStackTrace();
	}
		
	}
	
	
}=======
package com.assentisk.util;


import java.io.InputStream;
import java.sql.ResultSet;
import java.sql.SQLException;


import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.support.JdbcDaoSupport;


public class FilesService extends JdbcDaoSupport {

	String query = null;

	public InputStream getImage(){  
		 return (InputStream) getJdbcTemplate().query("select CompanyLogo from assentisk_company where CompanyID=11",new ResultSetExtractor(){  
		     public InputStream extractData(ResultSet rs) throws SQLException,  
		            DataAccessException {  
		      
		    	InputStream input = rs.getBinaryStream("CompanyLogo");
		        return input;
		        }  
		    });  
		  }  
	
	public void save(final Files file,String sql) {
		
		query = sql;
		try {
			synchronized (this) {
				getJdbcTemplate().update(new PreparedStatementCreator() {
					public java.sql.PreparedStatement createPreparedStatement(
							java.sql.Connection con) throws SQLException {
						java.sql.PreparedStatement statement = con
								.prepareStatement(query);
						
						statement.setBytes(1, file.getFile());
						
						return statement;
					}
				});
			}

		} catch (NullPointerException ex) {
			ex.printStackTrace();
		}

	}
	
	
}>>>>>>> .r280
