package com.assentisk.controller;

import java.io.InputStream;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.util.List;
import java.util.Map;


import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.ui.ModelMap;
import org.springframework.validation.BindException;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.SimpleFormController;

import com.assentisk.dao.GroupDao;
import com.assentisk.dao.MasterDao;
import com.assentisk.dao.OrganizationDao;

import com.assentisk.bean.ApplicationsBean;
import com.assentisk.bean.BusinessProcessesBean;
import com.assentisk.bean.CityBean;
import com.assentisk.bean.CompanyBean;
import com.assentisk.bean.CountryBean;
import com.assentisk.bean.DepartmentBean;
import com.assentisk.bean.EmployeeBean;
import com.assentisk.bean.GroupBean;
import com.assentisk.bean.LegalEntitiesBean;
import com.assentisk.bean.LocationsBean;
import com.assentisk.bean.StateBean;
import com.assentisk.util.Files;
import com.assentisk.util.FilesService;
import com.assentisk.util.UrlUtill;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;


public class OrganizationController extends SimpleFormController {

	protected OrganizationDao organizationDao;
	protected MasterDao masterDao;
	protected GroupDao groupDao;
	protected FilesService filesService;

	ModelAndView modelAndView;
	PrintWriter out;
	ModelMap map;

	public OrganizationDao getOrganizationDao() {
		return organizationDao;
	}

	public void setOrganizationDao(OrganizationDao organizationDao) {
		this.organizationDao = organizationDao;
	}

	public MasterDao getMasterDao() {
		return masterDao;
	}

	public void setMasterDao(MasterDao masterDao) {
		this.masterDao = masterDao;
	}
	
	public GroupDao getGroupDao() {
		return groupDao;
	}

	public void setGroupDao(GroupDao groupDao) {
		this.groupDao = groupDao;
	}

	
	public FilesService getFilesService() {
		return filesService;
	}

	public void setFilesService(FilesService filesService) {
		this.filesService = filesService;
	}

	protected ModelAndView showForm(HttpServletRequest req,
			HttpServletResponse res, BindException ex) throws Exception {

		String url = UrlUtill.UrlName(req.getRequestURI());
		if (url.equals("company")) {
			modelAndView = new ModelAndView("company");
		} else if (url.equals("companyList")) {
			return companyList(req, res);
		} else if (url.equals("departmentList")) {
			return departmentList(req, res);
		} else if (url.equals("addcompany")) {
			modelAndView = new ModelAndView("addcompany");
		} else if (url.equals("editcompany")) {
			return editCompany(req, res);
		} else if (url.equals("deleteCompany")) {
			return deletecompany(req, res);
		} else if (url.equals("editdepartment")) {
			return editDepartment(req, res);
		} else if (url.equals("department")) {
			modelAndView = new ModelAndView("department");
		} else if (url.equals("legalentities")) {
			modelAndView = new ModelAndView("legalentities");
		} else if (url.equals("legalEntitiesList")) {
			return legalEntitiesList(req, res);
		} else if (url.equals("editlegalentity")) {
			return editLegalEntity(req, res);
		} else if (url.equals("deleteLegalEntity")) {
			return deleteLegalEntity(req, res);
		} else if (url.equals("deleteDepartment")) {
			return deleteDepartment(req, res);
		} else if (url.equals("addlegalentity")) {
			return addlegalEntities(req, res);
		} else if (url.equals("adddepartment")) {
			return adddepartment(req, res);

		} else if (url.equals("locations")) {
			modelAndView = new ModelAndView("organization/locations");
		} else if (url.equals("locationsList")) {
			return locationsList(req, res);
		} else if (url.equals("addlocation")) {
			return addLocation(req, res);
		}
		 else if (url.equals("editlocation")) {
				return editLocation(req, res);
			}
		 else if (url.equals("deletelocation")) {
				return deleteLocation(req, res);
			}
		 else if (url.equals("applications")) {
			 modelAndView = new ModelAndView("organization/applications");
			}
		 else if (url.equals("businessprocesses")) {
			 modelAndView = new ModelAndView("organization/businessprocesses");
			}		
		 else if (url.equals("applicationsList")) {
			 return applicationsList(req, res);
			}
		 else if (url.equals("businessProcessesList")) {
			 return businessProcessesList(req, res);
			}
		 else if (url.equals("addapplication")) {
			 return addApplication(req, res);
			}
		 else if (url.equals("editapplication")) {
			 return editApplication(req, res);
			}
		 else if (url.equals("deleteApplication")) {
			 return deleteApplication(req, res);
			}
		 else if(url.equals("calldept")){
			 return calldept(req, res);
		 }
		
		 else if(url.equals("callbranch")){
			 return callbranch(req, res);
		 }
		
		else if (url.equals("addbusinessprocess")) {
			 return addBusinessProcess(req, res);
		}
		 else if (url.equals("editbusinessprocess")) {
			 return editBusinessProcess(req, res);
			}
		 else if (url.equals("deleteBusinessProcess")) {
			 return deleteBusinessProcess(req, res);
			}
		 else if(url.equals("employees")){
			 modelAndView = new ModelAndView("organization/employees");
		 }
		 else if(url.equals("employeesList")){
			 return employeesList(req, res);
		 }
		 else if (url.equals("addemployee")) {
			 return addEmployee(req, res);			
			}
		 else if (url.equals("editemployee")) {
			 return editEmployee(req, res);			
			}
		 else if (url.equals("companyview")) {
			
			return companyDetails(req, res);
		}else if (url.equals("companyedit")) {
			
			return companyEdit(req, res);
		}
		
		return modelAndView;
	}

	protected ModelAndView onSubmit(HttpServletRequest req,
			HttpServletResponse res, Object cmd, BindException errors)
			throws Exception {
		String url = UrlUtill.UrlName(req.getRequestURI());

		if (url.equals("savecompany")) {
			return savecompany(req, res);
		} else if (url.equals("savedepartment")) {
			return savedepartment(req, res);
		} else if (url.equals("savelegalentity")) {
			return savelegalentity(req, res);
		} else if (url.equals("updatedepartment")) {
			return updatedDepartment(req, res);
		} else if (url.equals("updatelegalentity")) {
			return updateLegalEntity(req, res);
		} else if (url.equals("updatecompany")) {
			return updatecompany(req, res);
		}
		else if (url.equals("savelocation")) {
			return saveLocation(req, res);
		}
		else if (url.equals("updatelocation")) {
			return updateLocation(req, res);
		}
		else if (url.equals("saveapplication")) {
			return saveApplication(req, res);
		}
		else if (url.equals("updateapplication")) {
			return updateApplication(req, res);
		}
		else if (url.equals("savebusinessprocess")) {
			return saveBusinessProcess(req, res);
		}
		else if (url.equals("updatebusinessprocess")) {
			return updateBusinessProcess(req, res);
		}
		else if(url.equals("saveEmployee"))
		{
			return saveEmployee(req, res);
		}
		else if(url.equals("updateEmployee"))
		{
			return updateEmployee(req, res);
		}
		else if (url.equals("updateCompanyDetail")) {
			return updateCompanyDetails(req, res);
		}
		return null;

	}

	public ModelAndView companyList(HttpServletRequest req,
			HttpServletResponse res) {

		try {
			out = res.getWriter();

			List<CompanyBean> getCompanyList = organizationDao.getCompanyList();
			PersonJsonObject personJsonObject = new PersonJsonObject();
			personJsonObject.setCompanyBean(getCompanyList);

			Gson gson = new GsonBuilder().setPrettyPrinting().create();
			String json2 = gson.toJson(personJsonObject);
			System.out.println(json2);
			out.print(json2);

		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return null;
	}

	public ModelAndView editCompany(HttpServletRequest req,
			HttpServletResponse res) {
		try {
			map = new ModelMap();
			String id = req.getParameter("id");			
			List getList = organizationDao.getcompany(id);
			if (getList.size() > 0) {
				map.addObject("getCompany", getList);
			}

			modelAndView = new ModelAndView("editcompany", map);

		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return modelAndView;
	}

	public ModelAndView updatecompany(HttpServletRequest req,
			HttpServletResponse res) {

		try {
			String cid = req.getParameter("cid");
			String cname = req.getParameter("cname");
			String no = req.getParameter("no");
			String isactive = req.getParameter("isactive");

			int status = 0;
			if (isactive.equals("true")) {
				status = 1;
			}

			organizationDao.updatecompany(cid, cname, no, status);

		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return null;
	}

	public ModelAndView deletecompany(HttpServletRequest req,
			HttpServletResponse res) {
		try {
			String id = req.getParameter("id");
			organizationDao.deletecompany(id);
			modelAndView = new ModelAndView("company");

		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return modelAndView;
	}

	public ModelAndView departmentList(HttpServletRequest req,
			HttpServletResponse res) {

		try {
			out = res.getWriter();

			List<DepartmentBean> getDepartmnentList = organizationDao
					.getDepartmentList();
			PersonJsonObject personJsonObject = new PersonJsonObject();
			personJsonObject.setDepartmentBean(getDepartmnentList);

			Gson gson = new GsonBuilder().setPrettyPrinting().create();
			String json2 = gson.toJson(personJsonObject);
			out.print(json2);

		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return null;
	}

	public ModelAndView savecompany(HttpServletRequest req,
			HttpServletResponse res) {

		try {
			
			InetAddress ip = InetAddress.getLocalHost();
			String userId = (String) req.getSession().getAttribute("UserRecordID");
			

			java.util.Date dt = new java.util.Date();
			java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String currentTime = sdf.format(dt);
			
			
			String cname = req.getParameter("cname");
			String no = req.getParameter("no");
			String isactive = req.getParameter("isactive");
			int status = 0;
			if (isactive.equals("true")) {
				status = 1;
			}
			organizationDao.savecompany(cname, no, status);
			masterDao.userAuditTrail("assentisk_company", "1", "1", currentTime, Integer.parseInt(userId), ip.getHostAddress());

		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return null;
	}

	public ModelAndView savedepartment(HttpServletRequest req,
			HttpServletResponse res) {

		try {
			int status = 0;
			java.util.Date dt = new java.util.Date();
			java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(
					"yyyy-MM-dd HH:mm:ss");
			String currentTime = sdf.format(dt);

			String companyID = req.getParameter("companyid");
			String branchid = req.getParameter("branchid");
			String departmentName = req.getParameter("departmentname");
			String departmentDesc = req.getParameter("departmentdesc");
			String isactive = req.getParameter("isactive");

			if (isactive.equals("true")) {
				status = 1;
			}

			organizationDao.savedepartment(Integer.parseInt(companyID), Integer
					.parseInt(branchid), departmentName, departmentDesc,
					currentTime, 1, currentTime, 1, status);
		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return null;
	}

	public ModelAndView editDepartment(HttpServletRequest req,
			HttpServletResponse res) {
		try {
			map = new ModelMap();
			String departmentid = req.getParameter("departmentid");
			List getCompanyList = organizationDao.getCmpList();
			map.addObject("companyList", getCompanyList);

			List getBranchList = organizationDao.getBranchList();
			map.addObject("branchList", getBranchList);

			List<DepartmentBean> getRow = organizationDao
					.getDepartmentById(Integer.parseInt(departmentid));
			if (getRow.size() > 0) {
				Map m = (Map) getRow.get(0);
				map.addObject("DepartmentID", m.get("DepartmentID"));
				map.addObject("CompanyID", m.get("CompanyID"));
				map.addObject("BranchID", m.get("BranchID"));
				map.addObject("DeptName", m.get("DeptName"));
				map.addObject("DeptDesc", m.get("DeptDesc"));
				map.addObject("IsActive", m.get("IsActive"));
			}

		} catch (Exception exception) {

		}
		return new ModelAndView("editdepartment", map);
	}

	public ModelAndView updatedDepartment(HttpServletRequest req,
			HttpServletResponse res) {

		try {
			int status = 0;
			java.util.Date dt = new java.util.Date();
			java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(
					"yyyy-MM-dd HH:mm:ss");
			String currentTime = sdf.format(dt);

			String departmentid = req.getParameter("departmentid");
			String companyID = req.getParameter("companyid");
			String branchID = req.getParameter("branchid");
			String departmentName = req.getParameter("departmentname");
			String departmentDesc = req.getParameter("departmentdesc");
			String isactive = req.getParameter("isactive");

			if (isactive.equals("true")) {
				status = 1;
			}

			organizationDao.updatedDepartment(Integer.parseInt(departmentid),
					Integer.parseInt(companyID), Integer.parseInt(branchID),
					departmentName, departmentDesc, currentTime, 1, status);

		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return null;
	}

	public ModelAndView legalEntitiesList(HttpServletRequest req,
			HttpServletResponse res) {

		try {
			out = res.getWriter();

			List<LegalEntitiesBean> getLegalEntitiesList = organizationDao
					.getLegalEntitiesList();
			PersonJsonObject personJsonObject = new PersonJsonObject();
			personJsonObject.setLegalEntitiesBean(getLegalEntitiesList);

			Gson gson = new GsonBuilder().setPrettyPrinting().create();
			String json2 = gson.toJson(personJsonObject);
			out.print(json2);

		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return null;
	}

	public ModelAndView savelegalentity(HttpServletRequest req,
			HttpServletResponse res) {

		try {
			int status = 0;
			java.util.Date dt = new java.util.Date();
			java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(
					"yyyy-MM-dd HH:mm:ss");
			String currentTime = sdf.format(dt);

			String legalEntityName = req.getParameter("legalentityname");
			String legalentitydesc = req.getParameter("legalentitydesc");
			String companyID = req.getParameter("companyid");
			String departmentID = req.getParameter("departmentid");
			String branchID = req.getParameter("branchid");
			String companyPeriodID = req.getParameter("companyperiodid");
			String isactive = req.getParameter("isactive");
			String empName = req.getParameter("empName");
			
			InetAddress ip = InetAddress.getLocalHost();
			String userId = (String) req.getSession().getAttribute("UserRecordID");
			
			
			if (isactive.equals("true")) {
				status = 1;
			}			

			masterDao.userAuditTrail("assentisk_divisions", "1", "1", currentTime, Integer.parseInt(userId), ip.getHostAddress());
			
			organizationDao.saveLegalEntity(legalEntityName, legalentitydesc,
					Integer.parseInt(companyID),
					Integer.parseInt(departmentID), Integer.parseInt(branchID),
					Integer.parseInt(companyPeriodID), currentTime, 1,
					currentTime, 1, status, organizationDao.getEmployeeIdByName(empName));

		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return null;
	}

	public ModelAndView editLegalEntity(HttpServletRequest req,
			HttpServletResponse res) {
		try {
			map = new ModelMap();
			List getCompanyList = organizationDao.getCmpList();
			map.addObject("companyList", getCompanyList);

			List getDepartmentList = organizationDao.getDepList();
			map.addObject("departmentList", getDepartmentList);

			List getBranchList = organizationDao.getBranchList();
			map.addObject("branchList", getBranchList);

			String legalentityid = req.getParameter("legalentityid");
			List<LegalEntitiesBean> getRow = organizationDao
					.getLegalEntityById(Integer.parseInt(legalentityid));
			if (getRow.size() > 0) {
				Map m = (Map) getRow.get(0);
				map.addObject("LegalEntityID", m.get("LegalEntityID"));
				map.addObject("LegalEntityName", m.get("LegalEntityName"));
				map.addObject("LegalEntityDescription", m
						.get("LegalEntityDescription"));
				map.addObject("CompanyID", m.get("CompanyID"));
				map.addObject("DepartmentID", m.get("DepartmentID"));
				map.addObject("BranchID", m.get("BranchID"));
				map.addObject("CompanyPeriodID", m.get("CompanyPeriodID"));
				map.addObject("EmpName", m.get("EmpName"));
				map.addObject("IsActive", m.get("IsActive"));
			}

		} catch (Exception exception) {

		}
		return new ModelAndView("editlegalentity", map);
	}

	public ModelAndView updateLegalEntity(HttpServletRequest req,
			HttpServletResponse res) {

		try {
			int status = 0;
			java.util.Date dt = new java.util.Date();
			java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(
					"yyyy-MM-dd HH:mm:ss");
			String currentTime = sdf.format(dt);

			String legalEntityID = req.getParameter("legalentityid");
			String legalEntityName = req.getParameter("legalentityname");
			String legalEntityDesc = req.getParameter("legalentitydescription");
			String companyID = req.getParameter("companyid");
			String departmentID = req.getParameter("departmentid");
			String branchID = req.getParameter("branchid");
			String companyPeriodID = req.getParameter("companyperiodid");
			String isactive = req.getParameter("isactive");
			String empName = req.getParameter("empName");

			InetAddress ip = InetAddress.getLocalHost();
			String userId = (String) req.getSession().getAttribute("UserRecordID");
			
			if (isactive.equals("true")) {
				status = 1;
			}

			masterDao.userAuditTrail("assentisk_divisions", "1", "1", currentTime, Integer.parseInt(userId), ip.getHostAddress());
			organizationDao.updatedLegalEntity(Integer.parseInt(legalEntityID),
					legalEntityName, legalEntityDesc, Integer
							.parseInt(companyID), Integer
							.parseInt(departmentID),
					Integer.parseInt(branchID), Integer
							.parseInt(companyPeriodID), currentTime, 1, status, organizationDao.getEmployeeIdByName(empName));

		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return null;
	}

	public ModelAndView deleteLegalEntity(HttpServletRequest req,
			HttpServletResponse res) {
		try {
			InetAddress ip = InetAddress.getLocalHost();
			String userId = (String) req.getSession().getAttribute("UserRecordID");
			

			java.util.Date dt = new java.util.Date();
			java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String currentTime = sdf.format(dt);
			
			String legalEntityID = req.getParameter("id");
			organizationDao.deleteLegalEntity(Integer.parseInt(legalEntityID));
			masterDao.userAuditTrail("assentisk_divisions", "1", "1", currentTime, Integer.parseInt(userId), ip.getHostAddress());

		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return null;
	}

	public ModelAndView deleteDepartment(HttpServletRequest req,
			HttpServletResponse res) {
		try {
			String id = req.getParameter("id");
			organizationDao.deleteDepartment((Integer.parseInt(id)));

		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return null;
	}

	public ModelAndView addlegalEntities(HttpServletRequest req,
			HttpServletResponse res) {
		try {
			map = new ModelMap();
			List getCompanyList = organizationDao.getCmpList();
			map.addObject("companyList", getCompanyList);

			List getDepartmentList = organizationDao.getDepList();
			map.addObject("departmentList", getDepartmentList);

			List getBranchList = organizationDao.getBranchList();
			map.addObject("branchList", getBranchList);

			modelAndView = new ModelAndView("addlegalentity", map);

		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return modelAndView;
	}

	public ModelAndView adddepartment(HttpServletRequest req,
			HttpServletResponse res) {

		try {
			map = new ModelMap();
			List getCompanyList = organizationDao.getCmpList();
			map.addObject("companyList", getCompanyList);

			List getBranchList = organizationDao.getBranchList();
			map.addObject("branchList", getBranchList);

			modelAndView = new ModelAndView("adddepartment", map);

		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return modelAndView;
	}

	public ModelAndView locationsList(HttpServletRequest req,
			HttpServletResponse res) {

		try {
			out = res.getWriter();

			List<LocationsBean> getLegalEntitiesList = organizationDao
					.getLocationsList();
			PersonJsonObject personJsonObject = new PersonJsonObject();
			personJsonObject.setLocationsBeans(getLegalEntitiesList);

			Gson gson = new GsonBuilder().setPrettyPrinting().create();
			String json2 = gson.toJson(personJsonObject);
			out.print(json2);
		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return null;
	}

	@SuppressWarnings("unchecked")
	public ModelAndView addLocation(HttpServletRequest req,
			HttpServletResponse res) {

		try {
			map = new ModelMap();
			List<CompanyBean> companyList = organizationDao.getCompanyList();
			List<CountryBean> countryList = masterDao.getCountryList();
			map.addObject("companyList", companyList);
			map.addObject("countryList", countryList);

		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return new ModelAndView("organization/addlocation", map);
	}
	
	public ModelAndView saveLocation(HttpServletRequest req,
			HttpServletResponse res) {
		
		try
		{	
			int status = 0;
			java.util.Date dt = new java.util.Date();
			java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(
					"yyyy-MM-dd HH:mm:ss");
			String currentTime = sdf.format(dt);
			
			InetAddress ip = InetAddress.getLocalHost();
			String userId = (String) req.getSession().getAttribute("UserRecordID");
			
			String locationname = req.getParameter("locationname");
			String companyid = req.getParameter("companyid");
			String countryid = req.getParameter("countryid");
			String stateid = req.getParameter("stateid");
			String cityid = req.getParameter("cityid");
			String street = req.getParameter("street");
			String address = req.getParameter("address");
			String contactno = req.getParameter("contactno");
			String zipcode = req.getParameter("zipcode");
			String phone1 = req.getParameter("phone1");
			String phone2 = req.getParameter("phone2");
			String email1 = req.getParameter("email1");
			String email2 = req.getParameter("email2");
			String fax1 = req.getParameter("fax1");
			String fax2 = req.getParameter("fax2");
			String url = req.getParameter("url");
			String isactive = req.getParameter("isactive");
			if(isactive.equals("true"))
			{
				status = 1;
			}


			masterDao.userAuditTrail("assentisk_company_locations", "1", "1", currentTime, Integer.parseInt(userId), ip.getHostAddress());
			organizationDao.saveLocation(locationname, Integer.parseInt(companyid), Integer.parseInt(countryid), Integer.parseInt(stateid), Integer.parseInt(cityid), street, address, contactno, zipcode, phone1, phone2, email1, email2, fax1, fax2, url, currentTime, 1, currentTime, 1, status);
			
			
		}
		catch(Exception exception)
		{
			exception.printStackTrace();
		}
		return null;
	}
	
	@SuppressWarnings("unchecked")
	public ModelAndView editLocation(HttpServletRequest req,
			HttpServletResponse res) {
		
		try
		{
			map = new ModelMap();
			String locationid = req.getParameter("id");
			List<LocationsBean> locationRow = organizationDao.getLocationById(Integer.parseInt(locationid));
			if(locationRow.size()>0)
			{
				Map m = (Map)locationRow.get(0);
				map.addObject("LocationID", m.get("LocationID"));
				map.addObject("CompanyID", m.get("CompanyID"));
				map.addObject("Name", m.get("Name"));
				map.addObject("Street", m.get("Street"));
				map.addObject("Address", m.get("Address"));
				map.addObject("CityID", m.get("CityID"));
				map.addObject("CountryID", m.get("CountryID"));
				map.addObject("StateID", m.get("StateID"));
				map.addObject("Contactno", m.get("Contactno"));
				map.addObject("ZipCode", m.get("ZipCode"));
				map.addObject("Phone1", m.get("Phone1"));
				map.addObject("Phone2", m.get("Phone2"));
				map.addObject("Email1", m.get("Email1"));
				map.addObject("Email2", m.get("Email2"));
				map.addObject("Fax1", m.get("Fax1"));
				map.addObject("Fax2", m.get("Fax2"));
				map.addObject("Url", m.get("Url"));
				map.addObject("IsActive", m.get("IsActive"));
				
				List<StateBean> stateList = organizationDao.getStateByCountryID(Integer.parseInt(m.get("CountryID").toString()));
				List<CityBean> cityList = organizationDao.getCityByStateCountryID(Integer.parseInt(m.get("StateID").toString()), Integer.parseInt(m.get("CountryID").toString()));
				
				map.addObject("stateList", stateList);
				map.addObject("cityList", cityList);
			}
			
			List<CompanyBean> companyList = organizationDao.getCompanyList();
			List<CountryBean> countryList = masterDao.getCountryList();
			
			
			map.addObject("companyList", companyList);
			map.addObject("countryList", countryList);	
		}
		catch(Exception exception)
		{
			exception.printStackTrace();
		}
		return new ModelAndView("organization/editlocation", map);
	}
	
	public ModelAndView updateLocation(HttpServletRequest req,
			HttpServletResponse res) {
		
		try
		{	
			int status = 0;
			java.util.Date dt = new java.util.Date();
			java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(
					"yyyy-MM-dd HH:mm:ss");
			String currentTime = sdf.format(dt);
			
			InetAddress ip = InetAddress.getLocalHost();
			String userId = (String) req.getSession().getAttribute("UserRecordID");
			
			String locationid = req.getParameter("locationid");
			String locationname = req.getParameter("locationname");
			String companyid = req.getParameter("companyid");
			String countryid = req.getParameter("countryid");
			String stateid = req.getParameter("stateid");
			String cityid = req.getParameter("cityid");
			String street = req.getParameter("street");
			String address = req.getParameter("address");
			String contactno = req.getParameter("contactno");
			String zipcode = req.getParameter("zipcode");
			String phone1 = req.getParameter("phone1");
			String phone2 = req.getParameter("phone2");
			String email1 = req.getParameter("email1");
			String email2 = req.getParameter("email2");
			String fax1 = req.getParameter("fax1");
			String fax2 = req.getParameter("fax2");
			String url = req.getParameter("url");
			String isactive = req.getParameter("isactive");
			if(isactive.equals("true"))
			{
				status = 1;
			}

			masterDao.userAuditTrail("assentisk_company_locations", "1", "1", currentTime, Integer.parseInt(userId), ip.getHostAddress());
			organizationDao.updateLocation(Integer.parseInt(locationid), locationname, Integer.parseInt(companyid), Integer.parseInt(countryid), Integer.parseInt(stateid), Integer.parseInt(cityid), street, address, contactno, zipcode, phone1, phone2, email1, email2, fax1, fax2, url, currentTime, 1, status);
			
			
		}
		catch(Exception exception)
		{
			exception.printStackTrace();
		}
		return null;
	}
	
	public ModelAndView deleteLocation(HttpServletRequest req,
			HttpServletResponse res) {
		
		try
		{
			InetAddress ip = InetAddress.getLocalHost();
			String userId = (String) req.getSession().getAttribute("UserRecordID");
			

			java.util.Date dt = new java.util.Date();
			java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String currentTime = sdf.format(dt);
			
			String locationid = req.getParameter("locationid");
			
			masterDao.userAuditTrail("assentisk_country", "1", "1", currentTime, Integer.parseInt(userId), ip.getHostAddress());
			organizationDao.deleteLocationById(Integer.parseInt(locationid));
		}
		catch(Exception exception)
		{
			exception.printStackTrace();
		}
		return null;
	}
	
	public ModelAndView applicationsList(HttpServletRequest req,
			HttpServletResponse res) {

		try {
			out = res.getWriter();

			List<ApplicationsBean> applicationsList = organizationDao.getApplicationsList();
			PersonJsonObject personJsonObject = new PersonJsonObject();
			personJsonObject.setApplicationsBeans(applicationsList);

			Gson gson = new GsonBuilder().setPrettyPrinting().create();
			String json2 = gson.toJson(personJsonObject);			
			out.print(json2);
		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return null;
	}
	
	public ModelAndView addApplication(HttpServletRequest req,
			HttpServletResponse res) {
		
		try
		{
		}
		catch(Exception exception)
		{
			exception.printStackTrace();
		}
		return new ModelAndView("organization/addapplication");
	}
	

	public ModelAndView callbranch(HttpServletRequest req,
			HttpServletResponse res) {		
		try
		{	
			boolean flag = false;
			String id = req.getParameter("id");			
			List getBranchList = organizationDao.getSelectBranchList(id);
			System.out.println("getbranch");
			if(getBranchList.size()>0){
				
				flag = true;
				
				map.addObject("branchList", getBranchList);
			}
			else
			{
				flag = false;
			}
			map.addObject("flag", flag);
			
			
		}
		catch(Exception exception)
		{
			exception.printStackTrace();
		}
		return new ModelAndView("branchList",map);
	}
	public ModelAndView calldept(HttpServletRequest req,
			HttpServletResponse res) {		
		try
		{	
			boolean flag = false;
			String branchid = req.getParameter("branchid");
			String companyid = req.getParameter("companyid");
		

			List getDepartmentList = organizationDao.getSelectDeptList(branchid,companyid);
			if(getDepartmentList.size()>0){
				
				flag = true;
				
				map.addObject("departmentList",getDepartmentList);
			}
			else
			{
				flag = false;
			}
			map.addObject("flag", flag);
			
			
			
		}
		catch(Exception exception)
		{
			exception.printStackTrace();
		}
		return new ModelAndView("departmentList",map);
	}
	
	public ModelAndView saveApplication(HttpServletRequest req,
			HttpServletResponse res) {

		try {
			
			int status = 0;
			java.util.Date dt = new java.util.Date();
			java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String currentTime = sdf.format(dt);
											
			String applicationname = req.getParameter("applicationname");
			String location = req.getParameter("location");
			String division = req.getParameter("division");			
			String empname = req.getParameter("responsiblehead");	
			String isactive = req.getParameter("isactive");
			InetAddress ip = InetAddress.getLocalHost();
			String userId = (String) req.getSession().getAttribute("UserRecordID");
			if(isactive.equals("true"))
			{
				status = 1;
			}
			masterDao.userAuditTrail("assentisk_country", "1", "1", currentTime, Integer.parseInt(userId), ip.getHostAddress());
			organizationDao.saveApplication(applicationname,organizationDao.getLocationIdByName(location),organizationDao.getDivisionIdByName(division), organizationDao.getEmployeeIdByName(empname), currentTime, currentTime, Integer.parseInt(userId), currentTime, Integer.parseInt(userId), status);
			
		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return null;
	}
	
	@SuppressWarnings("unchecked")
	public ModelAndView editApplication(HttpServletRequest req,
			HttpServletResponse res) {

		try {					
			map = new ModelMap();
			String applicationid = req.getParameter("id");			
			List<ApplicationsBean> applicationList = organizationDao.getApplicationDetailById(Integer.parseInt(applicationid));
			if(applicationList.size()>0)
			{
				Map m = (Map)applicationList.get(0);
				map.addObject("ApplicationID", m.get("ApplicationID"));
				map.addObject("ApplicationName",  m.get("ApplicationName"));
				map.addObject("LocationID",  m.get("Name"));
				map.addObject("DivisionID",  m.get("LegalEntityName"));
				map.addObject("EmployeeID",  m.get("EmpName"));
				map.addObject("RequestDate",  m.get("RequestDate"));
				map.addObject("IsActive",  m.get("IsActive"));
			}
			
		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return new ModelAndView("organization/editapplication", map);
	}
	
	public ModelAndView updateApplication(HttpServletRequest req,
			HttpServletResponse res) {

		try {
			
			int status = 0;
			java.util.Date dt = new java.util.Date();
			java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String currentTime = sdf.format(dt);
			
			String applicationid = req.getParameter("applicationid");
			String applicationname = req.getParameter("applicationname");
			String location = req.getParameter("location");
			String division = req.getParameter("division");
			String empname = req.getParameter("responsiblehead");	
			InetAddress ip = InetAddress.getLocalHost();
			String userId = (String) req.getSession().getAttribute("UserRecordID");
			
			
			String isactive = req.getParameter("isactive");
			
			if(isactive.equals("true"))
			{
				status = 1;
			}
			masterDao.userAuditTrail("assentisk_country", "1", "1", currentTime, Integer.parseInt(userId), ip.getHostAddress());
			organizationDao.updateApplication(Integer.parseInt(applicationid), applicationname,organizationDao.getLocationIdByName(location), organizationDao.getDivisionIdByName(division), organizationDao.getEmployeeIdByName(empname), currentTime, Integer.parseInt(userId), status);
			
		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return null;
	}
	
	public ModelAndView deleteApplication(HttpServletRequest req,
			HttpServletResponse res) {
		
		try
		{
			java.util.Date dt = new java.util.Date();
			java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String currentTime = sdf.format(dt);
			
			InetAddress ip = InetAddress.getLocalHost();
			String userId = (String) req.getSession().getAttribute("UserRecordID");
			
			String applicationid = req.getParameter("id");
			
			masterDao.userAuditTrail("assentisk_country", "1", "1", currentTime, Integer.parseInt(userId), ip.getHostAddress());
			organizationDao.deleteApplicationById(Integer.parseInt(applicationid));
		}
		catch(Exception exception)
		{
			exception.printStackTrace();
		}
		return null;
	}
	
	public ModelAndView businessProcessesList(HttpServletRequest req,
			HttpServletResponse res) {

		try {
			out = res.getWriter();

			List<BusinessProcessesBean> businessProcessList = organizationDao.getBusinessProcessesList();
			PersonJsonObject personJsonObject = new PersonJsonObject();
			personJsonObject.setBusinessProcessesBeans(businessProcessList);

			Gson gson = new GsonBuilder().setPrettyPrinting().create();
			String json2 = gson.toJson(personJsonObject);			
			out.print(json2);
		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return null;
	}
	
	public ModelAndView addBusinessProcess(HttpServletRequest req,
			HttpServletResponse res) {
		
		try
		{
			map = new ModelMap();
			List<LocationsBean> locationList = organizationDao.getLocationsList();
			List<LegalEntitiesBean> divisionList = organizationDao.getLegalEntitiesList();
			map.addObject("locationList", locationList);
			map.addObject("divisionList", divisionList);
		}
		catch(Exception exception)
		{
			exception.printStackTrace();
		}
		return new ModelAndView("organization/addbusinessprocess", map);
	}
	
	public ModelAndView saveBusinessProcess(HttpServletRequest req,
			HttpServletResponse res) {

		try {
			
			int status = 0;
			java.util.Date dt = new java.util.Date();
			java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String currentTime = sdf.format(dt);
											
			String businessprocessname = req.getParameter("businessprocessname");
			String location = req.getParameter("location");
			String division = req.getParameter("division");
			String empname = req.getParameter("responsiblehead");	
			String isactive = req.getParameter("isactive");
			InetAddress ip = InetAddress.getLocalHost();
			String userId = (String) req.getSession().getAttribute("UserRecordID");
			
			if(isactive.equals("true"))
			{
				status = 1;
			}
			

			masterDao.userAuditTrail("assentisk_country", "1", "1", currentTime, Integer.parseInt(userId), ip.getHostAddress());
			organizationDao.saveBusinessProcess(businessprocessname, Integer.parseInt(location), Integer.parseInt(division), organizationDao.getEmployeeIdByName(empname), currentTime, currentTime, Integer.parseInt(userId), currentTime,  Integer.parseInt(userId), status);
			
		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return null;
	}
	
	@SuppressWarnings("unchecked")
	public ModelAndView editBusinessProcess(HttpServletRequest req,
			HttpServletResponse res) {

		try {					
			map = new ModelMap();
			String businessprocessid = req.getParameter("id");			
			List<BusinessProcessesBean> businessProcessList = organizationDao.getBusinessProcessDetailById(Integer.parseInt(businessprocessid));
			if(businessProcessList.size()>0)
			{
				Map m = (Map)businessProcessList.get(0);
				map.addObject("BusinessProcessID", m.get("BusinessProcessID"));
				map.addObject("BusinessProcessName",  m.get("BusinessProcessName"));
				map.addObject("LocationID",  m.get("LocationID"));
				map.addObject("DivisionID",  m.get("DivisionID"));
				
				map.addObject("EmpName",  m.get("EmpName"));
				map.addObject("RequestDate",  m.get("RequestDate"));
				map.addObject("IsActive",  m.get("IsActive"));
			}
						
			List<LocationsBean> locationList = organizationDao.getLocationsList();
			List<LegalEntitiesBean> divisionList = organizationDao.getLegalEntitiesList();
			
			map.addObject("locationList", locationList);
			map.addObject("divisionList", divisionList);
			
		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return new ModelAndView("organization/editbusinessprocess", map);
	}
	
	public ModelAndView updateBusinessProcess(HttpServletRequest req,
			HttpServletResponse res) {

		try {
			
			int status = 0;
			java.util.Date dt = new java.util.Date();
			java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String currentTime = sdf.format(dt);
			
			String businessprocessid = req.getParameter("businessprocessid");
			String businessprocessname = req.getParameter("businessprocessname");
			String location = req.getParameter("location");
			String division = req.getParameter("division");
			String empname = req.getParameter("responsiblehead");
			InetAddress ip = InetAddress.getLocalHost();
			String userId = (String) req.getSession().getAttribute("UserRecordID");
			
			String isactive = req.getParameter("isactive");
			
			if(isactive.equals("true"))
			{
				status = 1;
			}
			

			masterDao.userAuditTrail("assentisk_country", "1", "1", currentTime, Integer.parseInt(userId), ip.getHostAddress());
			organizationDao.updateBusinessProcess(Integer.parseInt(businessprocessid), businessprocessname, Integer.parseInt(location), Integer.parseInt(division), organizationDao.getEmployeeIdByName(empname), currentTime, Integer.parseInt(userId), status);
			
		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return null;
	}
	
	public ModelAndView deleteBusinessProcess(HttpServletRequest req,
			HttpServletResponse res) {
		
		try
		{
			java.util.Date dt = new java.util.Date();
			java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String currentTime = sdf.format(dt);
			
			InetAddress ip = InetAddress.getLocalHost();
			String userId = (String) req.getSession().getAttribute("UserRecordID");
			
			String businessprocessid = req.getParameter("id");
			
			masterDao.userAuditTrail("assentisk_country", "1", "1", currentTime, Integer.parseInt(userId), ip.getHostAddress());
			organizationDao.deleteBusinessProcessById(Integer.parseInt(businessprocessid));
		}
		catch(Exception exception)
		{
			exception.printStackTrace();
		}
		return null;
	}
	
	public ModelAndView employeesList(HttpServletRequest req,
			HttpServletResponse res) {

		try {
			out = res.getWriter();

			List<EmployeeBean> getEmployeeList = organizationDao.getEmployeeList();
			PersonJsonObject personJsonObject = new PersonJsonObject();
			personJsonObject.setEmpBeans(getEmployeeList);

			Gson gson = new GsonBuilder().setPrettyPrinting().create();
			String json2 = gson.toJson(personJsonObject);
			System.out.println(json2);
			out.print(json2);

		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return null;
	}
	
	@SuppressWarnings("unchecked")
	public ModelAndView addEmployee(HttpServletRequest req,
			HttpServletResponse res) {

		try {
			map = new ModelMap();			
			List<CountryBean> countryList = masterDao.getCountryList();	
			List<EmployeeBean> employeeList = organizationDao.getEmployeeList();
			List<GroupBean> groupList = groupDao.getList();
			List<CompanyBean> companyList = organizationDao.getCompanyList();
			List<DepartmentBean> departmentList = organizationDao.getDepartmentList();
			
			map.addObject("countryList", countryList);
			map.addObject("employeeList", employeeList);
			map.addObject("groupList", groupList);
			map.addObject("companyList", companyList);
			map.addObject("departmentList", departmentList);

		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return new ModelAndView("organization/addEmployees", map);
	}
	
	
	public ModelAndView saveEmployee(HttpServletRequest req,
			HttpServletResponse res) {
		
		try
		{	
			int status = 0;
			java.util.Date dt = new java.util.Date();
			java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(
					"yyyy-MM-dd HH:mm:ss");
			String currentTime = sdf.format(dt);
			
			InetAddress ip = InetAddress.getLocalHost();
			String userId = (String) req.getSession().getAttribute("UserRecordID");
			
			String ename = req.getParameter("ename");			
			String companyid = req.getParameter("companyid");
			String departmentid = req.getParameter("departmentid");
			String locations = req.getParameter("locations");			
			String divisions = req.getParameter("divisions");
			String address = req.getParameter("address");
			String countryid = req.getParameter("countryid");
			String stateid = req.getParameter("stateid");
			String cityid = req.getParameter("cityid");
			String zip = req.getParameter("zip");
			String photo = "";			
			String phone1 = req.getParameter("phone1");
			String phone2 = req.getParameter("phone2");
			String email1 = req.getParameter("email1");
			String email2 = req.getParameter("email2");					
			String isactive = req.getParameter("isactive");		
			String username = req.getParameter("username");
			String password = req.getParameter("password");
			String group = req.getParameter("group");
			String reporting = req.getParameter("reporting");
			
			
			if(isactive.equals("true"))
			{
				status = 1;
			}			
			
			organizationDao.saveUserRecord(ename, username, password, email1, currentTime, currentTime);			
			organizationDao.saveEmployee(organizationDao.getUserRecordID(), Integer.parseInt(companyid), Integer.parseInt(departmentid),organizationDao.getLocationIdByName(locations), ename, email1, Integer.parseInt(reporting), group, currentTime, currentTime, Integer.parseInt(userId), currentTime, Integer.parseInt(userId), status, address, Integer.parseInt(cityid), Integer.parseInt(stateid), Integer.parseInt(countryid), zip, photo, phone1, phone2,organizationDao.getDivisionIdByName(divisions), email2);
			masterDao.userAuditTrail("assentisk_employees", "1", "1", currentTime, Integer.parseInt(userId), ip.getHostAddress());
			masterDao.userAuditTrail("assentisk_userrecord", "1", "1", currentTime, Integer.parseInt(userId), ip.getHostAddress());
			
			
		}
		catch(Exception exception)
		{
			exception.printStackTrace();
		}
		return null;
	}
	
	public ModelAndView companyDetails(HttpServletRequest req,
			HttpServletResponse res) {		
		try
		{	
			map = new ModelMap();
			
			List<CompanyBean> getRow = organizationDao.getCompanyDetails();
			List getCurrency = organizationDao.getCurrency();
			List getLicense = organizationDao.getLicense();
			if(getRow.size()>0)
			{
				Map m = (Map)getRow.get(0);
				map.addObject("CompanyID", m.get("CompanyID"));
				map.addObject("CompanyName", m.get("CompanyName"));
				map.addObject("CompanyLogo", m.get("CompanyLogo"));
				
				map.addObject("HeadOffice_Address", m.get("HeadOffice_Address"));
				map.addObject("HeadOffice_Country", m.get("HeadOffice_Country"));
				map.addObject("HeadOffice_City", m.get("HeadOffice_City"));
				map.addObject("HeadOffice_State", m.get("HeadOffice_State"));
				map.addObject("HeadOffice_Zip", m.get("HeadOffice_Zip"));
				
				map.addObject("Primary_Contact_Name", m.get("Primary_Contact_Name"));
				map.addObject("Primary_Contact_Number", m.get("Primary_Contact_Number"));
				map.addObject("PrimaryEmail", m.get("PrimaryEmail"));
				
				map.addObject("Legal_Contact_Name", m.get("Legal_Contact_Name"));
				map.addObject("Legal_Contact_Number", m.get("Legal_Contact_Number"));
				map.addObject("Legal_Contact_Email", m.get("Legal_Contact_Email"));
				
				map.addObject("Accounts_Contact_Name", m.get("Accounts_Contact_Name"));
				map.addObject("Accounts_Contact_Number", m.get("Accounts_Contact_Number"));
				map.addObject("Accounts_Contact_Email", m.get("Accounts_Contact_Email"));			
				
				
				map.addObject("Currency", m.get("currency"));
			
				
			}
			
			if(getCurrency.size()>0)
			{
				System.out.println("see this.."+getCurrency.get(0));
				map.addObject("currencyList",getCurrency);
				
			}
			if(getLicense.size()>0)
			{
				int size=getLicense.size();
				int fetch=size-1;
				System.out.println("check this value..."+getLicense.get(fetch));
				map.addObject("license",getLicense);
				
				
			}
			modelAndView = new ModelAndView("companyView", map);			
			
		}
		catch(Exception exception)
		{
			exception.printStackTrace();
		}
		return modelAndView;
	}
	
	public ModelAndView companyEdit(HttpServletRequest req,
			HttpServletResponse res) {		
		try
		{	System.out.println("hiiii");
			map = new ModelMap();
			
			List<CompanyBean> getRow = organizationDao.getCompanyDetails();
			List getCurrency = organizationDao.getCurrency();
			
			if(getRow.size()>0)
			{
				Map m = (Map)getRow.get(0);
				map.addObject("CompanyID", m.get("CompanyID"));
				map.addObject("CompanyName", m.get("CompanyName"));
				map.addObject("CompanyLogo", m.get("CompanyLogo"));
				
				map.addObject("HeadOffice_Address", m.get("HeadOffice_Address"));
				map.addObject("HeadOffice_Country", m.get("HeadOffice_Country"));
				map.addObject("HeadOffice_City", m.get("HeadOffice_City"));
				map.addObject("HeadOffice_State", m.get("HeadOffice_State"));
				map.addObject("HeadOffice_Zip", m.get("HeadOffice_Zip"));
				
				map.addObject("Primary_Contact_Name", m.get("Primary_Contact_Name"));
				map.addObject("Primary_Contact_Number", m.get("Primary_Contact_Number"));
				map.addObject("PrimaryEmail", m.get("PrimaryEmail"));
				
				map.addObject("Legal_Contact_Name", m.get("Legal_Contact_Name"));
				map.addObject("Legal_Contact_Number", m.get("Legal_Contact_Number"));
				map.addObject("Legal_Contact_Email", m.get("Legal_Contact_Email"));
				
				map.addObject("Accounts_Contact_Name", m.get("Accounts_Contact_Name"));
				map.addObject("Accounts_Contact_Number", m.get("Accounts_Contact_Number"));
				map.addObject("Accounts_Contact_Email", m.get("Accounts_Contact_Email"));			
				
				
				map.addObject("Currency", m.get("currency"));
				
			}
			if(getCurrency.size()>0)
			{
				System.out.println("see this.."+getCurrency.get(0));
				map.addObject("currencyList",getCurrency);
				
			}
			modelAndView = new ModelAndView("company", map);			
			
		}
		catch(Exception exception)
		{
			exception.printStackTrace();
		}
		return modelAndView;
	}
	
	public ModelAndView updateCompanyDetails(HttpServletRequest req,
			HttpServletResponse res) {

		try {
			InputStream inputStream = null; 
			int status = 0;
			java.util.Date dt = new java.util.Date();
			java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(
					"yyyy-MM-dd HH:mm:ss");
			String currentTime = sdf.format(dt);
			
			String companyID = req.getParameter("CompanyID");
			String companyname = req.getParameter("companyname");
			String headOffice = req.getParameter("headOffice");
			String country = req.getParameter("country");
			String city = req.getParameter("city");
			String state = req.getParameter("state");
			String zip = req.getParameter("zip");
			
			String Primary_Contact_Name = req.getParameter("Primary_Contact_Name");
			String Primary_Contact_Number = req.getParameter("Primary_Contact_Number");
			String primaryEmail = req.getParameter("primaryEmail");
			
			String Legal_Contact_Name = req.getParameter("Legal_Contact_Name");
			String Legal_Contact_Number = req.getParameter("Legal_Contact_Number");
			String Legal_Contact_Email = req.getParameter("Legal_Contact_Email");
			
			String Accounts_Contact_Name = req.getParameter("Accounts_Contact_Name");
			String Accounts_Contact_Number = req.getParameter("Accounts_Contact_Number");
			String Accounts_Contact_Email = req.getParameter("Accounts_Contact_Email");
			
			String isactive = req.getParameter("isactive");
			String currency = req.getParameter("currency");

			System.out.println("check currenxcy");
			if (isactive!=null && isactive.equals("true")) {
				status = 1;
			}
						
			MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) req;
			MultipartFile multipartFile = multipartRequest.getFile("logo");
			Files file = new Files();
			file.setFile(multipartFile.getBytes());
			filesService.save(file, "update assentisk_company set CompanyLogo=? where CompanyID="+companyID+"");

			organizationDao.updatedCompany(Integer.parseInt(companyID), companyname, headOffice, country, city, state,zip,Primary_Contact_Name,Primary_Contact_Number,primaryEmail,Legal_Contact_Name,Legal_Contact_Number,Legal_Contact_Email,Accounts_Contact_Name,Accounts_Contact_Number,Accounts_Contact_Email,status,currentTime,currency);
			

		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return new ModelAndView("redirect:/companyview.org.htm");
	}
	
	
	@SuppressWarnings("unchecked")
	public ModelAndView editEmployee(HttpServletRequest req,
			HttpServletResponse res) {

		try {
			map = new ModelMap();
			
			String employeeID = req.getParameter("id");
			
			List<EmployeeBean> employeeRecord = organizationDao.getEmployeeRecordById(Integer.parseInt(employeeID));
			if(employeeRecord.size()>0)
			{
				Map m = (Map)employeeRecord.get(0);
				map.addObject("UserRecordID", m.get("UserRecordID"));
				map.addObject("EmpName", m.get("EmpName"));
				map.addObject("CompanyID", m.get("CompanyID"));
				map.addObject("DepartmentID", m.get("DepartmentID"));
				map.addObject("LocationID", organizationDao.getLocationNameById(Integer.parseInt(m.get("LocationID").toString())));
				map.addObject("divisions", organizationDao.getDivisionNameById(Integer.parseInt(m.get("divisions").toString())));
				map.addObject("address", m.get("address"));
				map.addObject("country", m.get("country"));
				map.addObject("state", m.get("state"));
				map.addObject("city", m.get("city"));
				map.addObject("zip", m.get("zip"));
				map.addObject("phone1", m.get("phone1"));
				map.addObject("phone2", m.get("phone2"));
				map.addObject("Email", m.get("Email"));
				map.addObject("email2", m.get("email2"));
				map.addObject("IsActive", m.get("IsActive"));
				map.addObject("EmpUsername", m.get("EmpUsername"));
				map.addObject("EmpPassword", m.get("EmpPassword"));
				map.addObject("RoleID", m.get("RoleID"));
				map.addObject("ReportingTo", m.get("ReportingTo"));
				
				List<StateBean> stateList = organizationDao.getStateByCountryID(Integer.parseInt(m.get("country").toString()));
				List<CityBean> cityList = organizationDao.getCityByStateCountryID(Integer.parseInt(m.get("state").toString()), Integer.parseInt(m.get("country").toString()));
				
				map.addObject("cityList", cityList);
				map.addObject("stateList", stateList);	
			}
			List<CountryBean> countryList = masterDao.getCountryList();	
			List<EmployeeBean> employeeList = organizationDao.getEmployeeList();
			List<GroupBean> groupList = groupDao.getList();
			List<CompanyBean> companyList = organizationDao.getCompanyList();
			List<DepartmentBean> departmentList = organizationDao.getDepartmentList();
			
			map.addObject("countryList", countryList);
			map.addObject("employeeList", employeeList);
			map.addObject("groupList", groupList);
			map.addObject("companyList", companyList);
			map.addObject("departmentList", departmentList);

		} catch (Exception exception) {
			exception.printStackTrace();
		}
		return new ModelAndView("organization/editEmployees", map);
	}
	
	
	public ModelAndView updateEmployee(HttpServletRequest req,
			HttpServletResponse res) {
		
		try
		{	
			int status = 0;
			java.util.Date dt = new java.util.Date();
			java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(
					"yyyy-MM-dd HH:mm:ss");
			String currentTime = sdf.format(dt);
			
			InetAddress ip = InetAddress.getLocalHost();
			String userId = (String) req.getSession().getAttribute("UserRecordID");
			
			String employeeid = req.getParameter("employeeid");
			String ename = req.getParameter("ename");			
			String companyid = req.getParameter("companyid");
			String departmentid = req.getParameter("departmentid");
			String locations = req.getParameter("locations");			
			String divisions = req.getParameter("divisions");
			String address = req.getParameter("address");
			String countryid = req.getParameter("countryid");
			String stateid = req.getParameter("stateid");
			String cityid = req.getParameter("cityid");
			String zip = req.getParameter("zip");
			String photo = "";			
			String phone1 = req.getParameter("phone1");
			String phone2 = req.getParameter("phone2");
			String email1 = req.getParameter("email1");
			String email2 = req.getParameter("email2");					
			String isactive = req.getParameter("isactive");		
			String username = req.getParameter("username");
			String password = req.getParameter("password");
			String group = req.getParameter("group");
			String reporting = req.getParameter("reporting");
			
			
			if(isactive.equals("true"))
			{
				status = 1;
			}			
						
			organizationDao.udpateUserRecord(Integer.parseInt(userId),ename, username, password, email1, currentTime);			
			organizationDao.updateEmployee(Integer.parseInt(userId),organizationDao.getUserRecordID(), Integer.parseInt(companyid), Integer.parseInt(departmentid),organizationDao.getLocationIdByName(locations), ename, email1, Integer.parseInt(reporting), group, currentTime, Integer.parseInt(userId), status, address, Integer.parseInt(cityid), Integer.parseInt(stateid), Integer.parseInt(countryid), zip, photo, phone1, phone2,organizationDao.getDivisionIdByName(divisions), email2);
			masterDao.userAuditTrail("assentisk_employees", "1", "1", currentTime, Integer.parseInt(userId), ip.getHostAddress());
			masterDao.userAuditTrail("assentisk_userrecord", "1", "1", currentTime, Integer.parseInt(userId), ip.getHostAddress());
			
			
		}
		catch(Exception exception)
		{
			exception.printStackTrace();
		}
		return null;
	}
}
